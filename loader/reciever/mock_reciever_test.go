// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reciever

import (
	"sync"

	"github.com/ozontech/framer/frameheader"
)

// Ensure, that FrameTypeProcessorMock does implement FrameTypeProcessor.
// If this is not the case, regenerate this file with moq.
var _ FrameTypeProcessor = &FrameTypeProcessorMock{}

// FrameTypeProcessorMock is a mock implementation of FrameTypeProcessor.
//
//	func TestSomethingThatUsesFrameTypeProcessor(t *testing.T) {
//
//		// make and configure a mocked FrameTypeProcessor
//		mockedFrameTypeProcessor := &FrameTypeProcessorMock{
//			ProcessFunc: func(header frameheader.FrameHeader, payload []byte, incomplete bool) error {
//				panic("mock out the Process method")
//			},
//		}
//
//		// use mockedFrameTypeProcessor in code that requires FrameTypeProcessor
//		// and then make assertions.
//
//	}
type FrameTypeProcessorMock struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(header frameheader.FrameHeader, payload []byte, incomplete bool) error

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Header is the header argument value.
			Header frameheader.FrameHeader
			// Payload is the payload argument value.
			Payload []byte
			// Incomplete is the incomplete argument value.
			Incomplete bool
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *FrameTypeProcessorMock) Process(header frameheader.FrameHeader, payload []byte, incomplete bool) error {
	if mock.ProcessFunc == nil {
		panic("FrameTypeProcessorMock.ProcessFunc: method is nil but FrameTypeProcessor.Process was just called")
	}
	callInfo := struct {
		Header     frameheader.FrameHeader
		Payload    []byte
		Incomplete bool
	}{
		Header:     header,
		Payload:    payload,
		Incomplete: incomplete,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	return mock.ProcessFunc(header, payload, incomplete)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//
//	len(mockedFrameTypeProcessor.ProcessCalls())
func (mock *FrameTypeProcessorMock) ProcessCalls() []struct {
	Header     frameheader.FrameHeader
	Payload    []byte
	Incomplete bool
} {
	var calls []struct {
		Header     frameheader.FrameHeader
		Payload    []byte
		Incomplete bool
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
